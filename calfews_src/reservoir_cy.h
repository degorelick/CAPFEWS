/* Generated by Cython 0.29.21 */

#ifndef __PYX_HAVE__calfews_src__reservoir_cy
#define __PYX_HAVE__calfews_src__reservoir_cy

#include "Python.h"
struct Reservoir_object;

/* "calfews_src/reservoir_cy.pxd":1
 * cdef public class Reservoir()[object Reservoir_object, type Reservoir_type]:             # <<<<<<<<<<<<<<
 * 
 *   cdef:
 */
struct Reservoir_object {
  PyObject_HEAD
  double dead_pool;
  double capacity;
  double max_carryover_target;
  double carryover_excess_use;
  double sodd_pct;
  double max_outflow;
  double delta_outflow_pct;
  double EOS_target;
  double lastYearEOS_target;
  double din;
  double dout;
  double envmin;
  double sodd;
  double basinuse;
  double consumed_releases;
  double sjrr_release;
  double evap_forecast;
  double lastYearRainflood;
  double variable_min_flow;
  double min_daily_overflow;
  double min_daily_uncontrolled;
  double fcr;
  double max_fcr;
  double gains_to_delta;
  double rainflood_flows;
  double baseline_flows;
  double max_daily_uncontrolled;
  double uncontrolled_available;
  double force_spill;
  double snowflood_flows;
  double saved_water;
  double total_capacity;
  double flood_flow_min;
  int is_Canal;
  int is_District;
  int is_Private;
  int is_Waterbank;
  int is_Reservoir;
  int T;
  int T_short;
  int melt_start;
  int exceedence_level;
  int iter_count;
  int eos_day;
  int nodd_meets_envmin;
  int has_downstream_target_flow;
  int has_delta_target;
  PyObject *key;
  PyObject *name;
  PyObject *forecastWYT;
  PyObject *days_through_month;
  PyObject *hist_wyt;
  PyObject *S;
  PyObject *R;
  PyObject *tocs;
  PyObject *available_storage;
  PyObject *flood_storage;
  PyObject *Rtarget;
  PyObject *R_to_delta;
  PyObject *days_til_full;
  PyObject *flood_spill;
  PyObject *flood_deliveries;
  PyObject *nodd;
  PyObject *Q;
  PyObject *E;
  PyObject *fci;
  PyObject *SNPK;
  PyObject *precip;
  PyObject *downstream;
  PyObject *fnf;
  PyObject *wytlist;
  PyObject *rainfnf_stds;
  PyObject *snowfnf_stds;
  PyObject *raininf_stds;
  PyObject *snowinf_stds;
  PyObject *baseinf_stds;
  PyObject *rainflood_fnf;
  PyObject *snowflood_fnf;
  PyObject *short_rainflood_fnf;
  PyObject *short_snowflood_fnf;
  PyObject *rainflood_inf;
  PyObject *snowflood_inf;
  PyObject *baseline_inf;
  PyObject *rainflood_forecast;
  PyObject *snowflood_forecast;
  PyObject *baseline_forecast;
  PyObject *max_direct_recharge;
  PyObject *downstream_short;
  PyObject *fnf_short;
  PyObject *fnf_new;
  PyObject *total_available_storage;
  PyObject *outflow_release;
  PyObject *reclaimed_carryover;
  PyObject *contract_flooded;
  PyObject *env_min_flow;
  PyObject *temp_releases;
  PyObject *tocs_rule;
  PyObject *sj_restoration_proj;
  PyObject *carryover_target;
  PyObject *sodd_curtail_pct;
  PyObject *exceedence;
  PyObject *cum_min_release;
  PyObject *oct_nov_min_release;
  PyObject *aug_sept_min_release;
  PyObject *monthly_demand;
  PyObject *monthly_demand_full;
  PyObject *monthly_demand_must_fill;
  PyObject *numdays_fillup;
  PyObject *flow_shape_regression;
  PyObject *dry_year_carryover;
  PyObject *env_min_flow_ya;
  PyObject *temp_releases_ya;
  PyObject *monthly;
  PyObject *daily_df_data;
  PyObject *snowpack;
  PyObject *daily_output_data;
  PyObject *k_close_wateryear;
  PyObject *monthly_new;
};

#ifndef __PYX_HAVE_API__calfews_src__reservoir_cy

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(_T) _T
#endif

__PYX_EXTERN_C DL_IMPORT(PyTypeObject) Reservoir_type;

#endif /* !__PYX_HAVE_API__calfews_src__reservoir_cy */

/* WARNING: the interface of the module init function changed in CPython 3.5. */
/* It now returns a PyModuleDef instance instead of a PyModule instance. */

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initreservoir_cy(void);
#else
PyMODINIT_FUNC PyInit_reservoir_cy(void);
#endif

#endif /* !__PYX_HAVE__calfews_src__reservoir_cy */
