section_end_col = min(section_start_col + SectionDimensions[[section_id]][1],
ncol(CAP_forecast))
section_table = CAP_forecast[section_header_row:section_end_row, section_start_col:section_end_col]
# if this is the first year of data, format the master tables
# else, clean out empty rows add to table
# once raw data has been roughly aggregated, more cleaning will be done
# if this is the last table, it is really a version of previous table 10
#   with new name, so adjust accordingly
if (section_id == length(SectionHeaders)) {section_id = 10}
sheet_columns_base_names = paste("C", as.character(c(1:ncol(section_table))), sep="")
colnames(section_table) = sheet_columns_base_names
if (year_tab == 2008 | section_id > length(all_bottom_sections)) {
all_bottom_sections[[section_id]] = section_table %>% filter(!is.na(C1) | !is.na(C2)) %>%
mutate(Year = year_tab, Table = section_name)
if (section_name == "Projection of CAP Energy Purchases") {
all_bottom_sections[[section_id]] = section_table %>% filter(!is.na(C1) | !is.na(C2) | !is.na(C3)) %>%
mutate(Year = year_tab, Table = section_name)
}
if (section_name == "Mark Wilmer PP Detailed Daily \"Average\"  Power Schedule") {
all_bottom_sections[[section_id]] = section_table %>%
mutate(Year = year_tab, Table = section_name)
}
} else if (section_name == "Mark Wilmer PP Detailed Daily \"Average\"  Power Schedule" & year_tab == 2013) {
print("something happens here - not sure why but added exception")
all_bottom_sections[[section_id]] = section_table %>%
mutate(Year = year_tab, Table = section_name)
} else if (section_name == "Mark Wilmer PP Detailed Daily \"Average\"  Power Schedule" & year_tab == 2014) {
print("something happens here - not sure why but added exception again")
all_bottom_sections[[section_id]] = rbind(all_bottom_sections[[section_id]],
section_table %>%
mutate(Year = year_tab, Table = section_name))
} else {
all_bottom_sections[[section_id]] = rbind(all_bottom_sections[[section_id]],
section_table %>% filter(!is.na(C1) | !is.na(C2)) %>%
mutate(Year = year_tab, Table = section_name))
}
}
}
# print to cleaned spreadsheet
write.csv(file = paste("CAP_deliveries_by_user_2008_to_2021.csv", sep = ""), x = all_sections)
## Aug 2022: make separate loop to capture overall deliveries
#   and historical diversion data for CAPFEWS model inputs
for (year_tab in 2008:2021) {
# read in year tab
extra_tab_value = ""; if (year_tab >= 2020) {extra_tab_value = " T0"}
CAP_forecast = readxl::read_xlsx(path = "forecast Historical 2008 to 2021.xlsx",
sheet = paste(as.character(year_tab), extra_tab_value, sep = ""),
trim_ws = FALSE)
print(paste(as.character(year_tab), extra_tab_value, sep = ""))
# standardize basic column headers so we can be consistent between spreadsheets
n_columns_in_sheet = ncol(CAP_forecast)
sheet_columns_base_names = paste("C", as.character(c(1:n_columns_in_sheet)), sep="")
colnames(CAP_forecast) = sheet_columns_base_names
# extract commonly-formatted data
# first ~80% of each sheet has consistent formatting - last chunk of
# forecast data is a set titled TOTAL DELIVERIES BY CLASS
# that I will use as a flag to split up the data and read it
# consistently between tabs
final_first_set_row = which(stringr::str_squish(CAP_forecast$C1) == "COLORADO RIVER ACTUAL")[1]
SectionHeaders = c("TOTAL CUSTOMER DELIVERIES")
ColumnNames = c("Variable",
"Jan", "Feb", "Mar", "Q1",
"Apr", "May", "Jun", "Q2",
"Jul", "Aug", "Sep", "Q3",
"Oct", "Nov", "Dec", "Q4", "Total",
"Empty1", "Physical Turnout", "Empty2")[1:min(n_columns_in_sheet,21)]
# create master table to hold all years
if (year_tab == 2008) {
all_sections = CAP_forecast[1,] %>%
rename_at(vars(colnames(CAP_forecast)[1:length(ColumnNames)]), function(x) ColumnNames) %>%
select(-grep("Empty", ColumnNames))
all_sections = all_sections %>%
select(-grep("C", colnames(all_sections))) %>%
mutate(Group = NA, Subgroup = NA, Name = NA, Section = NA, Year = NA) %>% filter(!is.na(Jan))
}
## run code for first half of data
# for debugging: section_name = SectionHeaders[4] is Hassayampa PP
for (section_name in SectionHeaders) {
# set bounds to read in each section of code
section_start_row = which(CAP_forecast$C1 == section_name)
section_end_row = min(which(CAP_forecast$C1 %in% SectionHeaders)[
which(CAP_forecast$C1 %in% SectionHeaders) > section_start_row], final_first_set_row+1, na.rm = TRUE)
# read in and organize
section = CAP_forecast[(section_start_row):(section_end_row-1),] %>%
rename_at(vars(colnames(CAP_forecast)[1:length(ColumnNames)]), function(x) ColumnNames) %>%
select(-grep("Empty", ColumnNames))
section = section %>%
select(-grep("C", colnames(section))) %>%
mutate(Group = NA, Subgroup = NA, Name = NA, Section = stringr::str_squish(section_name), Year = year_tab)
# based on indentations, sort into subcategory headers
temporary_group = NA; temporary_subgroup = NA; temporary_name = NA
for (row in 1:nrow(section)) {
if (is.na(section$Variable[row])) {next}
# appears to be a typo in this particular region, causing
# all the ag use to be transcribed under "DROUGHT" use
if (section_name == "SALT GILA PP" & section$Variable[row] == "DROUGHT") {
section$Variable[row] = "    Drought"
}
# also, there is a case where some temporary rows are not indented as necessary
# and this disrupts how the following rows are classified
if (section$Variable[row] == "Temporary (-) for reduced deliveries (m&i)") {
section$Variable[row] = "           Temporary (-) for reduced deliveries"
}
if (section$Variable[row] == "Temporary Reduced M&I demand  (-) ") {
section$Variable[row] = "           Temporary (-) for reduced deliveries"
}
if (section$Variable[row] == "Temporary Indirect Reduced demand (-)") {
section$Variable[row] = "           Temporary (-) for reduced deliveries"
}
if (section$Variable[row] == "Temporary (-) for reduced deliveries (ag)") {
section$Variable[row] = "           Temporary (-) for reduced deliveries"
}
# longest indentations are names of users? more than 5 spaces of indentation
if (startsWith(stringr::str_squish(section$Variable[row]), "TOTAL")) {
temporary_group = section$Variable[row]; temporary_subgroup = NA; temporary_name = NA
} else if (startsWith(section$Variable[row], "      ")) {
temporary_name = section$Variable[row]
} else if (startsWith(section$Variable[row], " ")) {
temporary_subgroup = section$Variable[row]; temporary_name = NA
} else {
temporary_group = section$Variable[row]; temporary_subgroup = NA; temporary_name = NA
}
section$Group[row] = stringr::str_squish(temporary_group)
section$Subgroup[row] = stringr::str_squish(temporary_subgroup)
section$Name[row] = stringr::str_squish(temporary_name)
}
# clean up by dropping empty rows (mostly rows that just had headers in original file)
# and add to larger master set
section_clean = section %>% filter(!is.na(Jan) | !is.na(Total))
all_sections = rbind(all_sections, section_clean)
}
}
# print to cleaned spreadsheet
write.csv(file = paste("CAP_diversions_summary_2008_to_2021.csv", sep = ""), x = all_sections)
## clean the section section semi-manually!
lower_case_months = c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
upper_case_months = c("JAN", "FEB", "MAR", "APR", "MAY", "JUN",
"JUL", "AUG", "SEP", "OCT", "NOV", "DEC")
for (section in all_bottom_sections) {
if (section$Table[1] == "Lake Pleasant Projected EOM Elevation (ft)") {
section_cleaned = section %>%
filter(C1 != "Lake Pleasant Projected EOM Elevation (ft)") %>%
mutate(Value = ifelse(is.na(C2), as.numeric(C1), as.numeric(C2)),
Month = ifelse(is.na(C2), C2, C1),
Variable = "Elevation (ft)")
section_cleaned = section_cleaned %>%
mutate(Month = rep(section$C1[106:117], length.out = nrow(section_cleaned))) %>%
select(Table, Year, Month, Variable, Value)
}
if (section$Table[1] == "CAP Energy Transmission Losses") {
additional_row_names_to_keep = as.character(t(section[7:11,1]))
names_for_new_cols = as.character(section[6,2:17])
section_cleaned = section %>%
filter(C1 %in% c(lower_case_months, upper_case_months, additional_row_names_to_keep, "Total")) %>%
mutate(C1 = toupper(C1)) %>% select(-C18,-C19)
colnames(section_cleaned) = c("Month", names_for_new_cols, "Year", "Table")
section_cleaned = section_cleaned %>%
mutate(Month = ifelse(is.na(Total) & Month == "TOTAL", "TOTAL PERCENT LOSS", Month))
# make final set
section_cleaned = reshape2::melt(section_cleaned, id = c("Table", "Year", "Month"))
section_cleaned = section_cleaned %>% rename(Variable = variable, Value = value)
}
if (section$Table[1] == "CAP Energy Transmission Losses (Financial Reconcilation)") {
additional_row_names_to_keep = as.character(t(section[7:11,1]))
names_for_new_cols = as.character(section[6,2:17])
section_cleaned = section %>%
filter(C1 %in% c(lower_case_months, upper_case_months, additional_row_names_to_keep, "Total")) %>%
mutate(C1 = toupper(C1)) %>% select(-C18,-C19)
colnames(section_cleaned) = c("Month", names_for_new_cols, "Year", "Table")
section_cleaned = section_cleaned %>%
mutate(Month = ifelse(is.na(Total) & Month == "TOTAL", "TOTAL PERCENT LOSS", Month))
# make final set
section_cleaned = reshape2::melt(section_cleaned, id = c("Table", "Year", "Month"))
section_cleaned = section_cleaned %>% rename(Variable = variable, Value = value)
}
if (section$Table[1] == "Non-firm Transmission Service") {
# need to add months column manually
section_cleaned = section %>%
filter(!C1 %in% c("  Non-firm Transmission Service", "          Tucson B Plants only",
"Energy", "(MWh)", "--------")) %>%
filter(!is.na(C1)) %>%
mutate(Month = rep(c(upper_case_months, "TOTAL"), 13))
colnames(section_cleaned)[1:2] = c("Energy (MWH)", "Energy Rate ($/MWH)")
# make final set
section_cleaned = reshape2::melt(section_cleaned, id = c("Table", "Year", "Month"))
section_cleaned = section_cleaned %>% rename(Variable = variable, Value = value)
}
if (section$Table[1] == "CAP Pumping Plants - Daily \"Average\"  Power Schedule") {
# table size shifts after 2013, again after 2016
first_section = section %>% filter(Year < 2014)
second_section = section %>% filter(Year >= 2014 & Year < 2017)
third_section = section %>% filter(Year >= 2017)
# build headers for each section
first_top_header_name_row = c(rep("HAV*", 2), rep(NA, 17))
first_new_names_for_new_cols = stringr::str_squish(
stringr::str_c(stringr::str_replace_na(first_top_header_name_row, ""),
stringr::str_replace_na(first_section[7,2:20], ""), sep = " "))
second_top_header_name_row = c(rep("HAV*", 3), rep(NA, 18))
second_new_names_for_new_cols = stringr::str_squish(
stringr::str_c(stringr::str_replace_na(second_top_header_name_row, ""),
stringr::str_replace_na(second_section[7,2:22], ""), sep = " "))
third_top_header_name_row = c(rep("HAV*", 3), rep(NA, 15),
rep("Total Load", 2), rep("West Total", 2), rep("Waddell", 2), "South Total")
third_new_names_for_new_cols = stringr::str_squish(
stringr::str_c(stringr::str_replace_na(third_top_header_name_row, ""),
stringr::str_replace_na(third_section[7,2:26], ""), sep = " "))
# collect data, clean
first_section_cleaned = first_section %>%
filter(C1 %in% c(lower_case_months, upper_case_months, "Total")) %>%
mutate(C1 = toupper(C1)) %>%
select(-C21,-C22,-C23,-C24,-C25,-C26)
colnames(first_section_cleaned) = c("Month", first_new_names_for_new_cols, "Year", "Table")
second_section_cleaned = second_section %>%
filter(C1 %in% c(lower_case_months, upper_case_months, "Total")) %>%
mutate(C1 = toupper(C1)) %>%
select(-C23,-C24,-C25,-C26)
colnames(second_section_cleaned) = c("Month", second_new_names_for_new_cols, "Year", "Table")
third_section_cleaned = third_section %>%
filter(C1 %in% c(lower_case_months, upper_case_months, "Total")) %>%
mutate(C1 = toupper(C1))
colnames(third_section_cleaned) = c("Month", third_new_names_for_new_cols, "Year", "Table")
# combine
third_section_cleaned = reshape2::melt(third_section_cleaned, id = c("Table", "Year", "Month"))
second_section_cleaned = reshape2::melt(second_section_cleaned, id = c("Table", "Year", "Month"))
first_section_cleaned = reshape2::melt(first_section_cleaned, id = c("Table", "Year", "Month"))
section_cleaned = rbind(first_section_cleaned, second_section_cleaned, third_section_cleaned)
section_cleaned = section_cleaned %>% rename(Variable = variable, Value = value) %>%
mutate(Value = ifelse(Value == "n/a", NA, Value))
}
if (section$Table[1] == "Mark Wilmer PP Detailed Daily \"Average\"  Power Schedule") {
# table size shifts after 2013
first_section = section %>% filter(Year < 2014)
second_section = section %>% filter(Year >= 2014)
# apply headers to both sets, melt, then merge
top_header_name_row = c(rep("Weekdays", 8), rep("Sundays", 4), rep("Monthly", 2))
first_new_names_for_new_cols = stringr::str_squish(
stringr::str_c(top_header_name_row,
stringr::str_replace_na(first_section[9,2:15], ""),
stringr::str_replace_na(first_section[10,2:15], ""), sep = " "))
first_section_cleaned = first_section %>%
filter(C1 %in% c(lower_case_months, upper_case_months, "Total")) %>%
mutate(C1 = toupper(C1)) %>%
select(-C16, -C17)
colnames(first_section_cleaned) = c("Month", first_new_names_for_new_cols, "Year", "Table")
top_header_name_row = c(rep("Weekdays", 11), rep("Sundays", 4))
second_new_names_for_new_cols = stringr::str_squish(
stringr::str_c(top_header_name_row,
stringr::str_replace_na(second_section[9,2:16], ""),
stringr::str_replace_na(second_section[10,2:16], ""), sep = " "))
second_section_cleaned = second_section %>%
filter(C1 %in% c(lower_case_months, upper_case_months, "Total")) %>%
mutate(C1 = toupper(C1)) %>%
select(-C17)
colnames(second_section_cleaned) = c("Month", second_new_names_for_new_cols, "Year", "Table")
# stick them together
second_section_cleaned = reshape2::melt(second_section_cleaned, id = c("Table", "Year", "Month"))
first_section_cleaned = reshape2::melt(first_section_cleaned, id = c("Table", "Year", "Month"))
section_cleaned = rbind(first_section_cleaned, second_section_cleaned)
section_cleaned = section_cleaned %>% rename(Variable = variable, Value = value) %>%
mutate(Value = ifelse(Value == "n/a", NA, Value))
}
if (section$Table[1] == "Monthly Projection of CAP Energy Resources (Mega Watt Hours)") {
# table size shifts after 2015
# 2019, 2020 have "TRUE" for long energy sales (should equal negated OPS balance energy)
first_section = section %>% filter(Year < 2016)
second_section = section %>% filter(Year >= 2016) %>%
mutate(C21 = ifelse(C21 == "TRUE", as.character(-as.numeric(C19)), C21))
# apply headers to both sets, melt, then merge
first_section[8,3] = as.character(as.numeric(first_section[8,3]))
first_section[8,4] = as.character(as.numeric(first_section[8,4]))
first_section[6,13] = as.character(second_section[6,13])
first_new_names_for_new_cols = stringr::str_squish(
stringr::str_c(stringr::str_replace_na(first_section[6,2:18], ""),
stringr::str_replace_na(first_section[7,2:18], ""),
stringr::str_replace_na(first_section[8,2:18], ""),
stringr::str_replace_na(first_section[9,2:18], ""),sep = " "))
first_section_cleaned = first_section %>%
filter(C1 %in% c(lower_case_months, upper_case_months, "Total")) %>%
mutate(C1 = toupper(C1)) %>%
select(-C19, -C20, -C21)
colnames(first_section_cleaned) = c("Month", first_new_names_for_new_cols, "Year", "Table")
second_section[8,3] = first_section[8,3]
second_section[8,4] = first_section[8,4]
second_new_names_for_new_cols = stringr::str_squish(
stringr::str_c(stringr::str_replace_na(second_section[6,2:21], ""),
stringr::str_replace_na(second_section[7,2:21], ""),
stringr::str_replace_na(second_section[8,2:21], ""),
stringr::str_replace_na(toupper(second_section[9,2:21]), ""),sep = " "))
second_section_cleaned = second_section %>%
filter(C1 %in% c(lower_case_months, upper_case_months, "Total")) %>%
mutate(C1 = toupper(C1))
colnames(second_section_cleaned) = c("Month", second_new_names_for_new_cols, "Year", "Table")
# stick them together
second_section_cleaned = reshape2::melt(second_section_cleaned, id = c("Table", "Year", "Month"))
first_section_cleaned = reshape2::melt(first_section_cleaned, id = c("Table", "Year", "Month"))
section_cleaned = rbind(first_section_cleaned, second_section_cleaned)
section_cleaned = section_cleaned %>% rename(Variable = variable, Value = value) %>%
mutate(Table = "Monthly Projection of CAP Energy Resources (MWH)")
}
if (section$Table[1] == "HOURLY AVERAGE of CAP Energy Resources (Mega Watts)") {
# table size shifts after 2015
# 2019, 2020 have "TRUE" for long energy sales (should equal negated OPS balance energy)
first_section = section %>% filter(Year < 2016)
second_section = section %>% filter(Year >= 2016) %>%
mutate(C21 = ifelse(C21 == "TRUE", as.character(-as.numeric(C19)), C21))
# apply headers to both sets, melt, then merge
first_section[5,3] = as.character(as.numeric(first_section[5,3]))
first_section[5,4] = as.character(as.numeric(first_section[5,4]))
first_section[3,13] = as.character(second_section[3,13])
first_new_names_for_new_cols = stringr::str_squish(
stringr::str_c(stringr::str_replace_na(first_section[3,2:18], ""),
stringr::str_replace_na(first_section[4,2:18], ""),
stringr::str_replace_na(first_section[5,2:18], ""),
stringr::str_replace_na(first_section[6,2:18], ""),sep = " "))
first_section_cleaned = first_section %>%
filter(C1 %in% c(lower_case_months, upper_case_months, "Total")) %>%
mutate(C1 = toupper(C1)) %>%
select(-C19, -C20, -C21, -C22)
colnames(first_section_cleaned) = c("Month", first_new_names_for_new_cols, "Year", "Table")
second_section[5,3] = as.character(as.numeric(second_section[5,3]))
second_section[5,4] = as.character(as.numeric(second_section[5,4]))
second_new_names_for_new_cols = stringr::str_squish(
stringr::str_c(stringr::str_replace_na(second_section[3,2:21], ""),
stringr::str_replace_na(second_section[4,2:21], ""),
stringr::str_replace_na(second_section[5,2:21], ""),
stringr::str_replace_na(second_section[6,2:21], ""),sep = " "))
second_section_cleaned = second_section %>%
filter(C1 %in% c(lower_case_months, upper_case_months, "Total")) %>%
mutate(C1 = toupper(C1)) %>%
select(-C22)
colnames(second_section_cleaned) = c("Month", second_new_names_for_new_cols, "Year", "Table")
# stick them together
second_section_cleaned = reshape2::melt(second_section_cleaned, id = c("Table", "Year", "Month"))
first_section_cleaned = reshape2::melt(first_section_cleaned, id = c("Table", "Year", "Month"))
section_cleaned = rbind(first_section_cleaned, second_section_cleaned)
section_cleaned = section_cleaned %>% rename(Variable = variable, Value = value)
}
if (section$Table[1] == "Projection of CAP Energy Purchases") {
section_cleaned = section %>%
filter(C1 %in% c(lower_case_months, upper_case_months, "Total")) %>%
mutate(C1 = toupper(C1)) %>%
select(-C2, -C6, -C10, -C14, -C18, -C19, -C20)
section[1,3:18] = as.list(rep(unique(as.character(section[1,3:18]))[c(1,3,4,5)], each = 4))
new_names_for_new_cols = stringr::str_squish(stringr::str_c(stringr::str_replace_na(section[1,3:17], ""),
stringr::str_replace_na(section[3,3:17], ""),
stringr::str_replace_na(section[4,3:17], ""),
stringr::str_replace_na(section[5,3:17], ""),
stringr::str_replace_na(section[6,3:17], ""),sep = " "))
colnames(section_cleaned) = c("Month",
new_names_for_new_cols[-c(4,8,12)],
"Year", "Table")
section_cleaned = reshape2::melt(section_cleaned, id = c("Table", "Year", "Month"))
section_cleaned = section_cleaned %>% rename(Variable = variable, Value = value)
}
if (section$Table[1] == "Projection of Navajo Power Purchases") {
section_cleaned = section %>%
filter(C1 %in% c(lower_case_months, upper_case_months, "Total")) %>%
mutate(C1 = toupper(C1)) %>%
select(-C16, -C17)
section[3,3] = as.character(as.numeric(section[3,3]))
new_names_for_new_cols = stringr::str_squish(stringr::str_c(stringr::str_replace_na(section[1,2:15], ""),
stringr::str_replace_na(section[2,2:15], ""),
stringr::str_replace_na(section[3,2:15], ""),
stringr::str_replace_na(section[4,2:15], ""), sep = " "))
colnames(section_cleaned) = c("Month",
new_names_for_new_cols,
"Year", "Table")
section_cleaned = reshape2::melt(section_cleaned, id = c("Table", "Year", "Month"))
section_cleaned = section_cleaned %>% rename(Variable = variable, Value = value)
}
if (section$Table[1] == "CAP Pumping Plants - Projection of Energy Use - For Deliveries Only") {
section_cleaned = section %>%
filter(C1 %in% c(lower_case_months, upper_case_months, "Total", "(KWH/AF)->")) %>%
mutate(C1 = toupper(C1)) %>%
select(-C8, -C9) %>%
mutate(C7 = ifelse(C1 == "(KWH/AF)->", NA, C7))
colnames(section_cleaned) = c("Month",
stringr::str_c(section[2,2:6], stringr::str_replace_na(section[3,2:6], ""), sep = ""),
"Total West Energy",
"Year", "Table")
section_cleaned = reshape2::melt(section_cleaned, id = c("Table", "Year", "Month"))
section_cleaned = section_cleaned %>% rename(Variable = variable, Value = value)
}
if (section$Table[1] == "CAP Pumping Plants - Projection of Energy Use - For Waddell Filling Only") {
section_cleaned = section %>%
filter(C1 %in% c(lower_case_months, upper_case_months, "Total", "(KWH/AF)->")) %>%
mutate(C1 = toupper(C1)) %>%
select(-C7, -C9, -C10) %>%
mutate(C8 = ifelse(C1 == "(KWH/AF)->", NA, C8))
colnames(section_cleaned) = c("Month",
stringr::str_c(section[1,2:6], stringr::str_replace_na(section[2,2:6], ""), sep = ""),
"Total West Energy",
"Year", "Table")
section_cleaned = reshape2::melt(section_cleaned, id = c("Table", "Year", "Month"))
section_cleaned = section_cleaned %>% rename(Variable = variable, Value = value)
}
if (section$Table[1] == "CAP Pumping Plants - Projection of Water Volumes Pumped") {
section_cleaned = section %>%
filter(C1 %in% c(lower_case_months, upper_case_months, "Total")) %>%
select(-C18, -C19) %>%
mutate(C1 = toupper(C1))
colnames(section_cleaned) = c("Month",
stringr::str_c(section[1,2:17], stringr::str_replace_na(section[2,2:17], ""), sep = ""),
"Year", "Table")
section_cleaned = reshape2::melt(section_cleaned, id = c("Table", "Year", "Month"))
section_cleaned = section_cleaned %>% rename(Variable = variable, Value = value)
# THIS IS THE FIRST TABLE IN THE DATA SET ASSEMBLED, SO INITIALIZE MAIN SET
main_power_data_set = section_cleaned
}
if (section$Table[1] == "Analysis and breakdown of energy use") {
# other leftover headers to include in column names
# 						                        SGL to
# West Plant	West Plant	Total West	BLK	   (MLD)	Waddell	Total		Average	Average	Average
leftover_header_parts = c(NA, NA, "West Plant", "West Plant", "Total West",
"SGL to BLK", "(MLD)", "Waddell", "Total", NA, "Average", "Average", "Average")
new_names_for_new_cols = stringr::str_squish(stringr::str_c(stringr::str_replace_na(leftover_header_parts, ""),
stringr::str_replace_na(section[1,2:14], ""),
stringr::str_replace_na(section[2,2:14], ""),
stringr::str_replace_na(section[3,2:14], ""), sep = " "))
new_names_for_new_cols = c("Month", new_names_for_new_cols[c(1:9,11:13)])
section_cleaned = section %>%
filter(!is.na(C1)) %>% select(-C11, -C15, -C16) %>%
mutate(C1 = toupper(C1))
colnames(section_cleaned)[1:13] = new_names_for_new_cols
section_cleaned = reshape2::melt(section_cleaned, id = c("Table", "Year", "Month"))
section_cleaned = section_cleaned %>% rename(Variable = variable, Value = value)
}
if (section$Table[1] == "CAP Pumping Plants - Average Flow Projection") {
section_cleaned = section %>%
filter(C1 %in% c(lower_case_months, upper_case_months, "Total", "(KWH/AF)->")) %>%
select(-C18, -C19) %>%
mutate(C1 = toupper(C1))
colnames(section_cleaned) = c("Month",
stringr::str_c(section[1,2:17], stringr::str_replace_na(section[2,2:17], ""), sep = ""),
"Year", "Table")
section_cleaned = reshape2::melt(section_cleaned, id = c("Table", "Year", "Month"))
section_cleaned = section_cleaned %>% rename(Variable = variable, Value = value)
}
if (section$Table[1] == "CAP Pumping Plants - Projection of Energy Use") {
section_cleaned = section %>%
filter(C1 %in% c(lower_case_months, upper_case_months, "Total", "(KWH/AF)->")) %>%
mutate(C1 = toupper(C1)) %>%
mutate(C18 = ifelse(C1 == "(KWH/AF)->", NA, C18),
C19 = ifelse(C1 == "(KWH/AF)->", NA, C19))
colnames(section_cleaned) = c("Month",
stringr::str_c(section[1,2:17], stringr::str_replace_na(section[2,2:17], ""), sep = ""),
"Total System Energy", "Invoice Amount ($1000)",
"Year", "Table")
section_cleaned = reshape2::melt(section_cleaned, id = c("Table", "Year", "Month"))
section_cleaned = section_cleaned %>% rename(Variable = variable, Value = value)
}
# add section to the master set for a final database export and to use for plotting
main_power_data_set = rbind(main_power_data_set, section_cleaned)
}
# output complete dataset
write.table(file = paste("CAP_power_data_2008_to_2021.csv", sep = ""),
x = main_power_data_set, sep = ",", row.names = FALSE)
## do some plotting!
# results by month?
for (s in unique(all_sections$Section)) {
plotter = all_sections %>% filter(all_sections$Section == s) %>%
filter(!grepl("VOLUME PASSING", Variable)) %>%
filter(!grepl("TOTAL", Variable)) %>%
filter(!grepl("SEGMENT DEMAND", Variable))
temp = ggplot(data = plotter) +
geom_bar(aes(x = Year, y = as.numeric(Total), fill = Group), stat = "identity", color = NA) +
facet_wrap(Section ~ ., scales = "free_y") + ylab('AF') +
theme(axis.text.x = element_text(angle = 90))
ggsave(paste("visualization/CAP_forecast_actuals_2008_to_2021_section", s, ".png", sep = ""),
dpi = 400, units = "in", height = 5, width = 8)
}
# just do the volume passing - proxy for physical distance from Lake Havasu/CO River?
plotter = all_sections %>% filter(grepl("VOLUME PASSING", Variable)) %>% arrange(desc(as.numeric(Total)))
temp = ggplot(data = plotter) +
geom_line(aes(x = reorder(Section, -as.numeric(Total)), y = as.numeric(Total)/1000, color = Year, group = Year)) +
ylab('kAF') + xlab('CAP Section') + ggtitle('Water volume passing each section of the CAP Canal, by year') +
theme(axis.text.x = element_text(angle = 90))
ggsave(paste("visualization/CAP_forecast_actuals_2008_to_2021_section_VOLUMEPASSING", ".png", sep = ""),
dpi = 400, units = "in", height = 5, width = 8)
# plot seasonal patterns of deliveries at each pumping plant region
plotter = all_sections %>%
mutate(Section = fct_relevel(Section,
"HAVASU PP", "BOUSE PP", "LITTLE HARQUAHALA PP",
"HASSAYAMPA PP", "WADDELL PGP", "SALT GILA PP", "BRADY PP",
"PICACHO PP", "RED ROCK PP", "TWIN PEAKS PP",
"SANDARIO PP", "BRAWLEY PP", "SNYDER HILL PP",
"SAN XAVIER PP", "BLACK MOUNTAIN PP",
"TOTAL SYSTEM DELIVERIES", "TOTAL DELIVERIES BY CLASS")) %>%
filter(!grepl("VOLUME PASSING", Variable)) %>%
filter(!grepl("TOTAL", Variable)) %>%
filter(!grepl("SEGMENT DEMAND", Variable)) %>%
filter(!grepl("Canal", Variable)) %>%
filter(!grepl("FLOW", Variable)) %>%
pivot_longer(cols = c(Jan:Mar,Apr:Jun,Jul:Sep,Oct:Dec), names_to = 'Month', values_to = 'AF') %>%
filter(!is.na(AF)) %>%
filter(!is.na(Name)) %>%
filter(!grepl("FLOW", Group)) %>%
filter(!grepl("CAIDD", Group)) %>%
filter(!grepl("Remarket", Group)) %>%
filter(!grepl("TOTAL", Section)) %>%
mutate(Group = replace(Group, Group == "RECHARGE1:", "RECHARGE:"))
temp = ggplot(data = plotter) +
geom_bar(aes(x = fct_relevel(Month,
"Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"),
y = as.numeric(AF)/1000, fill = Year, group = Year), stat = "identity") +
ylab('AF') + xlab('Month') + ggtitle('Seasonal water delivery patterns in each section of the CAP Canal, 2008-2021') +
facet_grid(Group ~ Section, scales = "free_y") + ylab('kAF') +
theme(axis.text.x = element_text(angle = 90), strip.text.y = element_text(angle = 0, size = 10))
ggsave(paste("visualization/CAP_forecast_actuals_2008_to_2021_section_seasonal_bysectoryear", ".png", sep = ""),
dpi = 400, units = "in", height = 10, width = 21)
